#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class ABC < Racc::Parser

module_eval(<<'...end abc.y/module_eval...', 'abc.y', 20)
  
  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\[/
        @q.push [:LEFTBRACE, $&]
      when /\A\]/
        @q.push [:RIGHTBRACE, $&]
      when /\A"/
        @q.push [:DOUBLEQUOTE, $&]
      when /\A'/
        @q.push [:SINGLEQUOTE, $&]
      when /\A,/
        @q.push [:COMMA, $&]
      when /\A\w+/
        @q.push [:ITEM, $&]
      when /\A./
        @q.push [$&, $&]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def match(str)
    /\A#{str}/
  end

  def next_token
    @q.shift
  end

...end abc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,    13,    14,     9,    11,    10,     3,    15,     3,     9,
    11,    10,    12,    16,     4,    18,    19 ]

racc_action_check = [
     3,     5,     5,     3,     3,     3,    14,     9,     0,    14,
    14,    14,     4,    10,     1,    15,    16 ]

racc_action_pointer = [
     6,    14,   nil,    -2,    12,    -2,   nil,   nil,   nil,     1,
     7,   nil,   nil,   nil,     4,    10,     9,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -11,    -1,   -11,   -11,   -11,    -5,    -6,    -7,   -11,
   -11,   -10,    20,    -3,   -11,   -11,   -11,    -4,    -8,    -9 ]

racc_goto_table = [
     6,     5,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17 ]

racc_goto_check = [
     4,     3,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4 ]

racc_goto_pointer = [
   nil,     3,     2,    -2,    -3,   nil ]

racc_goto_default = [
   nil,   nil,     8,   nil,   nil,     7 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 9, :_reduce_none,
  0, 9, :_reduce_none,
  3, 10, :_reduce_3,
  3, 11, :_reduce_4,
  1, 11, :_reduce_5,
  1, 12, :_reduce_6,
  1, 12, :_reduce_7,
  3, 13, :_reduce_8,
  3, 13, :_reduce_9,
  1, 13, :_reduce_10 ]

racc_reduce_n = 11

racc_shift_n = 20

racc_token_table = {
  false => 0,
  :error => 1,
  :LEFTBRACE => 2,
  :RIGHTBRACE => 3,
  :COMMA => 4,
  :SINGLEQUOTE => 5,
  :ITEM => 6,
  :DOUBLEQUOTE => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEFTBRACE",
  "RIGHTBRACE",
  "COMMA",
  "SINGLEQUOTE",
  "ITEM",
  "DOUBLEQUOTE",
  "$start",
  "target",
  "array",
  "itemlist",
  "item",
  "quoted_item" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'abc.y', 5)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 7)
  def _reduce_4(val, _values, result)
     result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 8)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 10)
  def _reduce_6(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 11)
  def _reduce_7(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 13)
  def _reduce_8(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 14)
  def _reduce_9(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'abc.y', 15)
  def _reduce_10(val, _values, result)
     result = val[0]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class ABC


parser = ABC.new
while true
  puts
  print '> '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts "= #{parser.parse(str)}"
  rescue ParseError
    puts $!
  end
end
