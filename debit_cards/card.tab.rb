#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class CardEater < Racc::Parser

module_eval(<<'...end card.y/module_eval...', 'card.y', 123)
require 'json'
require 'date'

  def initialize
    @binstore = 'all_cards.txt'
  end

  def pan_details(pan)
    iin = pan[0...6]
    {
      pan:    pan, 
      iin:    iin,
      meta:   metadata(iin)
    }
  end

  def metadata(iin)
    File.open(@binstore, 'r') do |bins|
      bins.each do |line|
        json = JSON.parse(line)
        return json if json['BIN'] == iin
      end
    end
  end

  def luhn_valid?(number)
    digit_sum = 0
    digits    = number.to_s.reverse.split(//)
    digits.map(&:to_i).each_slice(2) do |a, b|
      even = b > 4 ? (2*b) - 9 : 2*b
      digit_sum += (even + a)
    end
    digit_sum % 10 == 0
  end

  def valid_cvv_for_type?(cvv, type)
    index = case type
    when /s/    then cvv =~ /^\d{3}$/
    when 'amex' then cvv =~ /^\d{4}$/
    else        nil
    end

    !index.nil?
  end

  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\|/
        @q.push [:PIPE, $&]
      when /\A\d{3,4}\Z/
        @q.push [:CVV, $&]
      when /\A\d{2}-\d{4}/
        @q.push [:DATE, Date.strptime($&, '%m-%Y')]
      when /\A\d{2}-\d{2}/
        @q.push [:DATE, Date.strptime($&, '%m-%y')]
      when /\A\d{6,}/
        push_card $&
      when /\A.+/
        @q.push [$&, $&]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

  private

  def push_card(digit_str)
    digit_str.split(//).each do |digit|
      case digit
      when /0/
        @q.push [:ZERO, $&.to_i]
      when /1/
        @q.push [:ONE, $&.to_i]
      when /2/
        @q.push [:TWO, $&.to_i]
      when /3/
        @q.push [:THREE, $&.to_i]
      when /4/
        @q.push [:FOUR, $&.to_i]
      when /5/
        @q.push [:FIVE, $&.to_i]
      when /6/
        @q.push [:SIX, $&.to_i]
      when /7/
        @q.push [:SEVEN, $&.to_i]
      when /8/
        @q.push [:EIGHT, $&.to_i]
      when /9/
        @q.push [:NINE, $&.to_i]
      end
    end
  end

...end card.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    26,    27,    28,    25,    29,    23,    24,    30,    31,    32,
    40,    42,    44,    18,    41,    10,    12,    14,    16,    17,
    46,    48 ]

racc_action_check = [
    19,    19,    19,    19,    19,    19,    19,    19,    19,    19,
    38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
    36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
    11,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    14,    14,    14,    14,    14,    14,    14,    14,    14,    14,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    16,    17,    18,     3,    16,     0,     0,     0,     0,     1,
    43,    46 ]

racc_action_pointer = [
   100,   109,   nil,   101,   nil,   nil,   nil,   nil,   nil,    25,
   nil,    35,    85,    55,    65,    75,    95,   101,    99,    -5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,   nil,    15,   nil,     5,   nil,
   nil,   nil,   nil,   108,   nil,   nil,   107,   nil,   nil ]

racc_action_default = [
    -8,   -38,    -1,   -38,    -7,    -9,   -10,   -11,   -12,   -38,
   -14,   -38,   -38,   -38,   -38,   -38,   -38,   -38,    -4,   -13,
   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,
   -35,   -36,   -37,   -15,   -16,   -18,   -17,   -19,   -20,   -21,
   -22,   -23,    49,   -38,    -3,   -24,    -6,    -2,    -5 ]

racc_goto_table = [
    37,     8,    19,    43,    33,    45,    36,    47,    38,     4,
     5,     6,     7,     3,     9,     1,    11,    34,    13,    45,
    35,     2,    45,    15,    45,    39 ]

racc_goto_check = [
    17,    10,    12,     4,    12,    17,    12,     5,    12,     6,
     7,     8,     9,     3,    11,     1,    13,    14,    15,    17,
    16,     2,    17,    18,    17,    19 ]

racc_goto_pointer = [
   nil,    15,    21,    13,   -15,   -39,     9,    10,    11,    12,
     1,    14,    -7,    16,     5,    18,     8,   -14,    23,     9 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,   nil,    22,    20,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_none,
  5, 17, :_reduce_2,
  1, 19, :_reduce_3,
  0, 19, :_reduce_4,
  1, 20, :_reduce_5,
  0, 20, :_reduce_6,
  1, 18, :_reduce_7,
  0, 18, :_reduce_8,
  1, 21, :_reduce_9,
  1, 21, :_reduce_10,
  1, 21, :_reduce_11,
  1, 21, :_reduce_12,
  2, 22, :_reduce_13,
  1, 26, :_reduce_none,
  2, 23, :_reduce_15,
  2, 28, :_reduce_16,
  2, 24, :_reduce_17,
  2, 30, :_reduce_18,
  2, 30, :_reduce_19,
  2, 25, :_reduce_20,
  2, 33, :_reduce_21,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  2, 27, :_reduce_24,
  1, 27, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none ]

racc_reduce_n = 38

racc_shift_n = 49

racc_token_table = {
  false => 0,
  :error => 1,
  :PIPE => 2,
  :DATE => 3,
  :CVV => 4,
  :FOUR => 5,
  :FIVE => 6,
  :SIX => 7,
  :THREE => 8,
  :SEVEN => 9,
  :ONE => 10,
  :TWO => 11,
  :EIGHT => 12,
  :NINE => 13,
  :ZERO => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PIPE",
  "DATE",
  "CVV",
  "FOUR",
  "FIVE",
  "SIX",
  "THREE",
  "SEVEN",
  "ONE",
  "TWO",
  "EIGHT",
  "NINE",
  "ZERO",
  "$start",
  "target",
  "valid_input",
  "valid_card",
  "valid_date",
  "cvv",
  "card",
  "visa",
  "mastercard",
  "maestro",
  "amex",
  "visa_iin",
  "digit_list",
  "mastercard_iin",
  "one_thru_five",
  "maestro_iin",
  "six_thru_zero",
  "digit",
  "amex_iin",
  "amex_iin_second_digit" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'card.y', 7)
  def _reduce_2(val, _values, result)
          result = val[0].merge(val[2]).merge(val[4])

      cvv   = val[4][:cvv]
      unless cvv.nil?
        type  = result[:card]
        result[:valid_cvv] = valid_cvv_for_type?(cvv, type)
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 18)
  def _reduce_3(val, _values, result)
          result = { 
        date:       val[0].strftime("%m-%y"),
        valid_date: val[0] > Date.today ? true : false 
      }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 23)
  def _reduce_4(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 26)
  def _reduce_5(val, _values, result)
     result = { cvv: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 27)
  def _reduce_6(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 31)
  def _reduce_7(val, _values, result)
          val[0][:valid_pan] &&= luhn_valid?(val[0][:pan])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 33)
  def _reduce_8(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 36)
  def _reduce_9(val, _values, result)
     result[:card] = 'visa' 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 37)
  def _reduce_10(val, _values, result)
     result[:card] = 'mastercard' 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 38)
  def _reduce_11(val, _values, result)
     result[:card] = 'maestro' 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 39)
  def _reduce_12(val, _values, result)
     result[:card] = 'amex' 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 48)
  def _reduce_13(val, _values, result)
          number = val.join 
      result = pan_details(number)
      result[:valid_pan] = [13, 16].include?(number.length)
    
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'card.y', 62)
  def _reduce_15(val, _values, result)
          number = val.join 
      result = pan_details(number)
      result[:valid_pan] = (number.length == 16)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 67)
  def _reduce_16(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 76)
  def _reduce_17(val, _values, result)
          number = val.join 
      result = pan_details(number)
      result[:valid_pan] = (12..19).include?(number.length)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 81)
  def _reduce_18(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 82)
  def _reduce_19(val, _values, result)
     result = val.join 
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 91)
  def _reduce_20(val, _values, result)
          number = val.join 
      result = pan_details(number)
      result[:valid_pan] = (number.length == 15)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'card.y', 96)
  def _reduce_21(val, _values, result)
     result = val.join 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'card.y', 106)
  def _reduce_24(val, _values, result)
     result = val.join 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CardEater


$parser = CardEater.new
def parse_line(line)
  $parser.parse(line)
rescue
  if ARGV.count == 0
    raise ParseError
  else
    { errors: "ParseError" }
  end
end

def from_file
  cards = File.open(ARGV[0], &:readlines)
  cards = cards.map(&method(:parse_line))

  puts JSON.pretty_generate(cards)
end

def from_stdin
  while true
    puts
    print '> '
    str = gets.chop!
    break if /^q$/i =~ str
    begin
      output = parse_line(str)
      puts JSON.pretty_generate(output)
    rescue ParseError
      parse_error
    end
  end
end

def parse_error
  puts
  puts "SYNTAX:\t CARD_NO | EXPIRATION\t| CVV"
  puts "FORMAT:\t \d{6,}\t | dd-yy(yy)?\t| \d{3,4}"
  puts
  puts "EXAMPLES:"
  puts "\t| 12-99 | "
  puts "\t41111111111111 | | 123"
  puts "\t5543 4483 7723 3433 | 11-2018 | 556"
  puts
  puts "NOTES:"
  puts "\t- whitespace is ignored (except newline)."
  puts "\t- pipes are necessary, even for omitted values."
end

def main
  if ARGV.count == 0
    from_stdin
  else
    from_file
  end
end

main
