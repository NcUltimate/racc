#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class NestedArray < Racc::Parser

module_eval(<<'...end nested_array.y/module_eval...', 'nested_array.y', 23)
  
  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\s+/
      when /\A\[/
        @q.push [:LBRACE, $&]
      when /\A\]/
        @q.push [:RBRACE, $&]
      when /\A,/
        @q.push [:COMMA, $&]
      when /\A(["'])(\w+)\1/
        @q.push [:STR, $2]
      when /\A\d+/
        @q.push [:NUM, $&]
      when /\A./
        @q.push [$&, $&]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end nested_array.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,    11,     3,     8,     9,     8,     9,     4,    12,    13,
     3 ]

racc_action_check = [
    13,     4,     3,    13,    13,     3,     3,     1,     5,     6,
     0 ]

racc_action_pointer = [
     8,     7,   nil,     0,     1,     5,     5,   nil,   nil,   nil,
   nil,   nil,   nil,    -2,   nil ]

racc_action_default = [
    -2,   -11,    -1,    -5,   -11,   -11,    -4,    -7,    -8,    -9,
   -10,    15,    -3,   -11,    -6 ]

racc_goto_table = [
     7,     5,     2,     6,     1,   nil,   nil,   nil,   nil,   nil,
    14 ]

racc_goto_check = [
     5,     3,     2,     4,     1,   nil,   nil,   nil,   nil,   nil,
     5 ]

racc_goto_pointer = [
   nil,     4,     2,    -2,     0,    -3 ]

racc_goto_default = [
   nil,   nil,    10,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_none,
  0, 8, :_reduce_none,
  3, 9, :_reduce_3,
  1, 10, :_reduce_none,
  0, 10, :_reduce_none,
  3, 11, :_reduce_6,
  1, 11, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none,
  1, 12, :_reduce_none ]

racc_reduce_n = 11

racc_shift_n = 15

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACE => 2,
  :RBRACE => 3,
  :COMMA => 4,
  :STR => 5,
  :NUM => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACE",
  "RBRACE",
  "COMMA",
  "STR",
  "NUM",
  "$start",
  "target",
  "array",
  "opt_itemlist",
  "itemlist",
  "item" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'nested_array.y', 7)
  def _reduce_3(val, _values, result)
     result = val[1] || '' 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'nested_array.y', 14)
  def _reduce_6(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class NestedArray


parser = NestedArray.new
while true
  puts
  print '> '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts "= #{parser.parse(str)}"
  rescue ParseError
    puts $!
  end
end
